{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAkBhD,OACE,mCACE,sBAAMC,SAbW,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQd,SACE,uBAAOO,KAAK,OAAOC,YAAY,SAASC,MAAOV,EAAYW,SAlBvC,SAACR,GACzBF,EAAcE,EAAES,OAAOF,e,+BCLbG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACdC,EADc,iDAEyBC,UAAUH,GAFnC,+DAGFI,MAAMF,GAHJ,cAGdG,EAHc,gBAIGA,EAAIC,OAJP,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVlB,kBAcbM,GAda,4CAAH,sDCCRO,EAAc,SAAC,GAAoB,IAAlBb,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MACjC,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKC,IAAKf,EAAKgB,IAAKN,MAEtB,qBAAKI,UAAU,aAAf,SACE,6BAAKJ,UCNAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAEpBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDd2BK,CAAc1B,GAAlCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAGtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aESjBgB,EArBM,SAACC,GAAW,IAAD,EAEQ3C,mBAAS,CAAC,mBAFlB,mBAErB4C,EAFqB,KAET7C,EAFS,KAI9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBAEA,6BACG6C,EAAWpB,KAAK,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCTvE8B,IAASC,OAAQ,cAAC,EAAD,IACfC,SAASC,eAAe,W","file":"static/js/main.8497086a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim().length > 2){\r\n      setCategories( cats => [ inputValue, ...cats] );\r\n      setInputValue('');\r\n    }\r\n\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" placeholder=\"Search\" value={inputValue} onChange={handleInputChange} />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n export const getGifs = async ( category ) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=BKbYkPjXlygY27kuUr7XTPOLIF1XOcu5`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return gifs;\r\n    \r\n  };","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const GifGridItem = ({ url, title }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <div className=\"card-img\">\r\n        <img src={url} alt={title} />\r\n      </div>\r\n      <div className=\"card-title\">\r\n        <h3>{title}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: images, loading } = useFetchGifs( category );\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n      { loading && <p className=\"animate__animated animate__flash\" >Loading...</p>  }\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      \r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n        \r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = (props) => {\r\n\r\n    const [categories, setCategories] = useState([\"Rick and Morty\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory  setCategories={ setCategories }/>\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map( category => <GifGrid category={category} key={category} />)}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render( <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}